<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git Note</title>
    <url>/1chooo-blog/2023/07/30/git_tips/</url>
    <content><![CDATA[<h2 id="Generate-SSH-key-git-config"><a href="#Generate-SSH-key-git-config" class="headerlink" title="Generate SSH key, git --config"></a>Generate <code>SSH key</code>, <code>git --config</code></h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># New Algorithm</span></span><br><span class="line">$ ssh-keygen -t ed25519 -C <span class="string">&quot;Gitlab SSH Key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Old Method</span></span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"></span><br><span class="line">~/.ssh/id_ed25519</span><br><span class="line"></span><br><span class="line"><span class="comment"># Click Enter Twice</span></span><br><span class="line">$ Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_ed25519):</span><br><span class="line">$ Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">$ Enter same passphrase again: [Type passphrase again]</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ <span class="built_in">cat</span> id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh -T git@gitlab.com</span><br><span class="line">$ git config --global user.name <span class="string">&quot;your_username&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;your_email_address@example.com&quot;</span></span><br><span class="line"></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure></div>

<h2 id="Make-the-commit"><a href="#Make-the-commit" class="headerlink" title="Make the commit"></a>Make the commit</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add the_changed_file</span><br><span class="line">$ git commit -m <span class="string">&quot;the comment of the change&quot;</span></span><br><span class="line">$ git branch -M branch_name</span><br><span class="line">$ git push -u origin branch_name    <span class="comment"># git push REMOTE-NAME BRANCH-NAME</span></span><br><span class="line"></span><br><span class="line">$ git push REMOTE-NAME TAG-NAME</span><br><span class="line">$ git push REMOTE-NAME --tags</span><br></pre></td></tr></table></figure></div>
<h4 id="Someone-has-been-through-the-bad-experience"><a href="#Someone-has-been-through-the-bad-experience" class="headerlink" title="Someone has been through the bad experience"></a>Someone has been through the bad experience</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push REMOTE-NAME LOCAL-BRANCH-NAME:REMOTE-BRANCH-NAME    <span class="comment"># git push &lt;remote&gt; &lt;source branch&gt;:&lt;dest branch&gt; </span></span><br></pre></td></tr></table></figure></div>
<h4 id="Solving-method"><a href="#Solving-method" class="headerlink" title="Solving method"></a>Solving method</h4><p>Branch2 is deleted and branch1 has been updated with some new changes.</p>
<p>Hence, if you want only the changes push on the branch2 from the branch1, try procedures below:</p>
<ul>
<li>On branch1: <code>git add .</code></li>
<li>On branch1: <code>git commit -m &#39;comments&#39;</code></li>
<li>On branch1: <code>git push origin branch1</code></li>
<li>On branch2: <code>git pull origin branch1</code></li>
<li>On branch1: revert to the previous commit.</li>
</ul>
<h2 id="Check-Git-Status"><a href="#Check-Git-Status" class="headerlink" title="Check Git Status"></a>Check Git Status</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">$ git checkout</span><br></pre></td></tr></table></figure></div>

<h2 id="Fork-Remote-Repo"><a href="#Fork-Remote-Repo" class="headerlink" title="Fork Remote Repo"></a>Fork Remote Repo</h2><p>You might already know that you can <strong>“fork”</strong> repositories on GitHub.</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add upstream THEIR_REMOTE_URL</span><br><span class="line"></span><br><span class="line">git fetch upstream</span><br><span class="line"><span class="comment"># Grab the upstream remote&#x27;s branches</span></span><br><span class="line">&gt; remote: Counting objects: 75, <span class="keyword">done</span>.</span><br><span class="line">&gt; remote: Compressing objects: 100% (53/53), <span class="keyword">done</span>.</span><br><span class="line">&gt; remote: Total 62 (delta 27), reused 44 (delta 9)</span><br><span class="line">&gt; Unpacking objects: 100% (62/62), <span class="keyword">done</span>.</span><br><span class="line">&gt; From https://github.com/OCTOCAT/REPO</span><br><span class="line">&gt;  * [new branch]      main     -&gt; upstream/main</span><br></pre></td></tr></table></figure></div>

<h2 id="Fetch-and-Merge"><a href="#Fetch-and-Merge" class="headerlink" title="Fetch and Merge"></a>Fetch and Merge</h2><h4 id="If-you-don’t-want-to-merge-in-your-local-change"><a href="#If-you-don’t-want-to-merge-in-your-local-change" class="headerlink" title="If you don’t want to merge in your local change"></a>If you don’t want to merge in your local change</h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch REMOTE-NAME</span><br><span class="line">$ git merge REMOTE-NAME/BRANCH-NAME</span><br></pre></td></tr></table></figure></div>

<h4 id="With-pull"><a href="#With-pull" class="headerlink" title="With pull"></a>With <code>pull</code></h4><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull REMOTE-NAME BRANCH-NAME</span><br></pre></td></tr></table></figure></div>

<h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase --interactive OTHER-BRANCH-NAME</span><br><span class="line"></span><br><span class="line">$ git rebase --interactive HEAD~7</span><br><span class="line">pick 1fc6c95 Patch A</span><br><span class="line">pick 6b2481b Patch B</span><br><span class="line">pick dd1475d something I want to <span class="built_in">split</span></span><br><span class="line">pick c619268 A fix <span class="keyword">for</span> Patch B</span><br><span class="line">pick fa39187 something to add to patch A</span><br><span class="line">pick 4ca2acc i cant typ goods</span><br><span class="line">pick 7b36971 something to move before patch B</span><br></pre></td></tr></table></figure></div>

<h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><p>When we forget to pull the remote source first, we can stash our commit then pull the remote commit first.</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash -u</span><br><span class="line"></span><br><span class="line">$ git stash list    <span class="comment"># All stash</span></span><br><span class="line">$ git stash show    <span class="comment"># The latest stash</span></span><br><span class="line">$ git stash show -u</span><br></pre></td></tr></table></figure></div>

<h2 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h2><p>Pop out the content in the stash</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure></div>

<h2 id="Gitignore"><a href="#Gitignore" class="headerlink" title="Gitignore"></a>Gitignore</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> debug.log &gt;&gt; .gitignore</span><br><span class="line">  </span><br><span class="line">$ git <span class="built_in">rm</span> --cached debug.log</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .gitignore</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">  </span><br><span class="line">$ git add -f debug.log</span><br><span class="line">  </span><br><span class="line">$ git commit -m <span class="string">&quot;Force adding debug.log&quot;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a class="link"   href="https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository" >Pushing commits to a remote repository <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://stackoverflow.com/questions/13897717/push-commits-to-another-branch" >Push commits to another branch <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.atlassian.com/git/tutorials/saving-changes/git-stash" >Git Stash <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.atlassian.com/git/tutorials/saving-changes/gitignore" >.gitignore <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>DEV</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>平板能輔助大學生上課嗎？</title>
    <url>/1chooo-blog/2023/07/29/no_book/</url>
    <content><![CDATA[<blockquote>
<p>誒～怎麼身邊上課的人開始都不帶書了！？</p>
</blockquote>
<p>大學生上大學到底要不要買平板來輔助學習，這個話題其實一直被討論著，現在也是不斷地被拿出來討論，沒有特定一個答案，於是賀編決定撰寫這篇文章，並結合就讀中央的期間，身邊所被討論過的內容以及自己的一些經驗（賀編本身有使用平板輔助的習慣）。</p>
<h3 id="🧸本篇文章討論流程："><a href="#🧸本篇文章討論流程：" class="headerlink" title="🧸本篇文章討論流程："></a>🧸本篇文章討論流程：</h3><ol>
<li>用途</li>
<li>價格及挑選</li>
<li>結論</li>
</ol>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*tg5IdfMpb60zbPonfmZHXQ.jpeg"
                      alt="pexels-cottonbro-4065171.jpg"
                ><figcaption>pexels-cottonbro-4065171.jpg</figcaption></figure></p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>使用平板在大學生多數場景可以大致上分為兩個，第一個為課堂上，第二個是課堂外。</p>
<h3 id="課堂上："><a href="#課堂上：" class="headerlink" title="課堂上："></a>課堂上：</h3><p>課堂上有平板的同學，可以臨時做筆記，快速記筆記，如果需要修改可以馬上修改，不用塗塗改      改，不會像傳統紙張、筆記本，可能需要用立可帶塗掉，甚至老師突然補述先前提及的內容也可以馬  上做修正，不會發生沒空間抄寫的問題。</p>
<p>臨時需要查找資料時也可以快速從平板搜尋，不需要從書包裡翻找出之前記錄過的內容。</p>
<p>另外有些學院的教授開始把教材變成電子檔，用平板的同學可以快速地在教材上記錄下重點，而不需要在上課前先去將教材印出來，而且忘記帶講義的時候，可以即時下載資料，避免發生在上課時沒有資料的慘況發生⋯⋯</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Ba2Sy3vX6mH29pfLNb4MNA.png"
                      alt="Screen Shot 2022-07-03 at 11.09.13 PM.png"
                ><figcaption>Screen Shot 2022-07-03 at 11.09.13 PM.png</figcaption></figure></p>
<h3 id="課堂外："><a href="#課堂外：" class="headerlink" title="課堂外："></a>課堂外：</h3><p>描述完課堂上的使用場景，來說說課堂外的使用吧！這時候大家做常聽到的說詞「買前生產力；買後愛奇藝」便會悄悄地晃到我們耳邊，不過我們本篇文章還是預設大家的使用場景是用來輔助學習，雖說好的放鬆時光也是推進我們向前的一大動力，哈！不過我們還是回到正題吧！</p>
<p>賀編本身是理工學院相關科系的，所以自身及身邊的同學使用量最大的場景便是計算繁雜的數學算式，甚至是公式推導，畢竟要複習課程中的內容，還有迫於時間因素，教授也未必會在課堂上將完整算式做推導，畢竟在大學裡可能隨便一個小小的算式用上幾張計算紙都算是家常便飯，於是平板這時便能發揮所長，可以快速翻閱資料，寫錯也可以快速塗改（例如：從計算的剛開頭就算錯的時候⋯⋯還有漏寫算式的時候⋯⋯）</p>
<p>講完了理工學院相關科系，來講個所有學院都將面臨到的使用情景「讀Paper」，這能帶到平板的一大功能「閱讀」，很多人都會透過平板做大量的閱讀，無論是文獻，又或者是自己的愛好書籍，一台平板，可以抵掉很多書籍的重量，又可以隨時隨地閱讀。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*gRyheXK1Zr4o7nzUNgl69Q.jpeg"
                      alt="pexels-rfstudio-3060654.jpg"
                ><figcaption>pexels-rfstudio-3060654.jpg</figcaption></figure></p>
<h2 id="價格及挑選"><a href="#價格及挑選" class="headerlink" title="價格及挑選"></a>價格及挑選</h2><p>平板的挑選也可以分為兩大類，第一個是Apple，另一個則是Android，其實無論是哪個類別的平板都需要投入金錢的成本，不過結合賀編，以及身邊還有訪問過的人的經驗，可以總結出兩個結論：</p>
<ol>
<li>財力</li>
<li>習慣</li>
</ol>
<p>首先來講述第一點「財力」，其實說老實話上述提及過的場景，只要有支觸控筆加上平板便能應付大多數的需求，所以不論Apple系統又或者是Android系統的高階、中階、低階平板都能夠負荷，因此挑選平板可以考量自己的經濟能力，想要比較新穎的功能或者其他需求，可能就得多多捏一點上更好的規格，哈！</p>
<p>另外換講述第二點「習慣」，Apple系統或者Android系統，本就是兩大陣營，早就經歷很多次的比較、爭辯，各有各自的擁護者，還是回到老話一句，其實只要有支觸控筆加上平板便能應付大多數的需求，因此自己習慣哪個系統，便可朝那個方向做挑選。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*RZ1xmhqrFefd5ffypyGVjw.jpeg"
                      alt="1333cba4be91a78d0d1db873ea6cc980.jpg"
                ><figcaption>1333cba4be91a78d0d1db873ea6cc980.jpg</figcaption></figure></p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上分享了一些賀編生活的案例，以及跟身邊討論、聊天提及到的情況，其實要不要買平板，這個話題真的太多人討論了，那要不要買真的端看個人習慣，平板雖說方便，可有一點就是完全無法取代，那便是「在紙張書寫的觸感」，許多人學習就喜歡觸碰實體書籍的感覺，況且要做好學問，無論是紙張或是平板都有辦法做好，再怎麼說平板就是個輔助學習的工具，賀編想近期會又這麼多討論，大概便是順應現在時代的變遷，學習的路徑加上了一個工具選項可以做嘗試，可能唯一能給到的建議，就是可以多爬些文章做比較，網路上還有很多很好的文章以及影片，一切端看自己的需求，以及財力，來做對自己好的決定。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e11db370-730a-4b13-89ce-bde047c05b8c/pexels-mikhail-nilov-6931023.jpg"
                      alt="pexels-mikhail-nilov-6931023.jpg"
                ><figcaption>pexels-mikhail-nilov-6931023.jpg</figcaption></figure></p>
<h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>文章下完結論後來分享一個賀編看到的一個有趣的經驗，在剛從大一升到大二時，班上的瞬間多了很多平板，超過半數的同學都買了平板，而且幾乎都是Ipad，多數同學都是搭上了Apple的「Back to school」方案做購買，這是大專學院的專屬優惠，如果暑假想要添購新設備的同學可以多多關注，可以少捏一點上好一點的設備，當然這個活動也不只平板啦！可以自行去官網看看哦～</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2tMD7NLX88PVvklYR2t_hg.jpeg"
                      alt="1655899178-f039f51cb6c66a067487eb6aacf97c83.jpg"
                ><figcaption>1655899178-f039f51cb6c66a067487eb6aacf97c83.jpg</figcaption></figure></p>
<blockquote>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#104;&#x75;&#103;&#x6f;&#57;&#55;&#48;&#50;&#49;&#x37;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#109;" >&#104;&#x75;&#103;&#x6f;&#57;&#55;&#48;&#50;&#49;&#x37;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>ipad</tag>
        <tag>Apple</tag>
        <tag>Freshman</tag>
      </tags>
  </entry>
  <entry>
    <title>剛上大學的我如何挑到適合我的平板！？</title>
    <url>/1chooo-blog/2023/07/29/pick_ipad/</url>
    <content><![CDATA[<p>疫情嚴峻的 2021 年中，所有戶外活動皆需要暫停，身為大一生，參與的校園活動被迫中止，連課程都改為遠距教學，學習方法勢必有所改變</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*f2BkDSANBT2XUGEzR-1_gw.jpeg"
                      alt="My iPad 8 !!!"
                ><figcaption>My iPad 8 !!!</figcaption></figure></p>
<blockquote>
<p>本文重點：</p>
<ol>
<li>購買前所做的準備</li>
<li>學習方法和生活方式的變化</li>
<li>我的觀點結論</li>
</ol>
</blockquote>
<p>上大學前，在挑選筆電的時候選擇了 MacBookPro 2020 13”，然而追求輕便的我，面對剛上大學一連串的教科書非常不適應，只要去圖書館或咖啡廳看書就要背著一大堆厚厚一疊的書，因此很傾向電子化的讀書方式，因此一直在考慮要買一台 iPad 來輔助我學習。</p>
<p>本來就在觀望iPad 的我，在疫情爆發全國遠距教學的背景下，便有了相當合適的契機購入了人生第一台 iPad，而購買的版本是 2020 年發行的第八代，容量為 128GB，接下來會先分享購買前的事前準備以及分享這生產力工具帶給我學習方法和生活方式的變化。</p>
<p>說到 iPad，常常聽到一句話買前生產力；買後愛奇藝或者是效能過剩這類的話，然而這類的話語大多出現在 iPad Pro 及 iPad Air 這類的機型，較少篇幅在描述最入門的款式，而剛好我所使用的機型便較不受此討論範疇，而最終也是我選購平板。</p>
<p>那接著來說說我是為何選購這台平價入門款的平板吧！</p>
<p>當下要購買平板的我卡在一個尷尬的時間點，而這時間點正逢新款 iPad Pro和大專生暑期活動——Back to School，這兩件大事之前，心裡的想法就是：科技產品買新不買舊、我都忍了快一年不入手 iPad Pro 了，當然要買最新的啊！、剛好暑假的活動可以送耳機，我需要那個酷東西。諸如此類的想法充斥在我的腦海中，不偏不倚正值遠距上課的高峰期，對於每天線上上課的狀態，我更充分展現了平板的需求，所以這時候才妥協：「既然買不到最新的 iPad Pro，享受不到蘋果的耳機優惠，我也沒有很想多貼錢換 iPad Air，那不然我就換最便宜的 iPad就好了！」（其實當時很多科技產品都缺貨，蘋果的平板也因為遠距非常熱賣，大多數規格都缺貨了），於是在如此掙扎之後就開始了和我的新學習夥伴的生活。</p>
<p>學習方法和生活方式的變化<br>那在前段文章分享完我購買平板當下的心境後，接著就來說說我的學習方法吧！其實我的學習方法並未有所差異性的改變，一如既往，依舊是在課後做著課後所需的練習、公式相關的推導，畢竟一直以來都沒有上課抄寫老師黑板上所講述的內容，這或許可以用下個篇幅來分享為什麽我不抄筆記～～～小組討論時，可以快速地記下註記把大家的短時間內產出的內容快速記下來以不致於遺漏；至於生活方法的話，偶爾可以在平板畫點小圖案，畢竟平板可以不受限於紙張條件，也可以快速更換畫筆的顏色，所以畫點小圖可說是非常便利呢！哦還有個至關重要的那就是每日的 TODO List，因為平板的便利，就可以在各個場合之下查看當日的待辦事項，或是目標進度，不需要再從書包裡掏出筆記本來查看，再來就是，書包變輕也變整潔了，因為不用在背更多書本、紙張，頂多就是平板、筆電、充電器就能出門了！</p>
<p>我的觀點結論<br>綜上經驗，平板對於我的日常是有達到幫助的，不過其實可以很坦白地說：「平板是真的方便，不過有沒有買是真的沒什麼差！！！」方便性這點就是可以隨時隨地做筆記，打開平板就能隨時查看需要的資料，再加上有些講義也是電子的形式，所以就更為方便了，那為何還有後面那句話呢？就是其實買平板不會變得特別認真，也不會讀得更好，就只是讀書的形式變了，但本質並未作改變，在大學要想學得更多，完全端看自己的讀書習管以及方法，平板並不會帶來太多的改變，也可能是我的使用情境頂多寫寫數學算式，做做統整、小筆記，所以這些完全紙本也能應付，所以才有此說法，並沒有像網路上很多開箱的人所說的這麼神。</p>
<p>所以我滿慶幸自己買到的平板是入門款的，無論是入門或是高規的平板，對於大多數人的需求而言都已經很足夠了，只有一點小小抱怨：「就是這台平版螢幕沒有全貼和，看劇體驗頗差的」看劇還是都用 MacBook Pro 看（蘋果筆電螢幕就是舒服！），在日常書寫真的沒有差太多，書寫完的樣子根本沒什麼差別，所以單就一般文書處理、寫寫筆記，真的真心話：「入門款就夠用了，把錢省了吧！」。</p>
<p>最後想給看到這篇的人購買建議就是：「其實一個產品在很多時候，任何人都會有不同的推薦、或是貶低，但一個產品到底需不需要購買，最重要的還是自己的需求。」與其看更多別人的使用場景，不如問問自己的吧！</p>
<hr>
<p>更一個後續，這篇文由於是第一次撰寫，共經歷了大一、大二階段才撰寫完成的，之後一定會有一篇詳細介紹我的讀書、辦公環境的，文章裡一定會提到更多我學習相關的內容的！</p>
<blockquote>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#x68;&#117;&#x67;&#x6f;&#x39;&#x37;&#48;&#50;&#49;&#x37;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;" >&#x68;&#117;&#x67;&#x6f;&#x39;&#x37;&#48;&#50;&#49;&#x37;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>ipad</tag>
        <tag>Apple</tag>
        <tag>Freshman</tag>
      </tags>
  </entry>
  <entry>
    <title>做個小貪吃蛇來玩吧！</title>
    <url>/1chooo-blog/2023/07/29/projects_intro/snake_game/</url>
    <content><![CDATA[<p>還記得當時剛學習程式語言的時候，對於什麼知識都不懂，連搜尋能力也沒有，常常搜不到關鍵字，問題也解決不了，不過當時懵懂無知的狀態，完成了基礎貪吃蛇的小遊戲，所以決定撰寫一篇文章來記錄當時的過程。</p>
<blockquote>
<h3 id="🧸-本文綱要："><a href="#🧸-本文綱要：" class="headerlink" title="🧸 本文綱要："></a>🧸 本文綱要：</h3><ol>
<li>環境建置</li>
<li>實作說明</li>
<li>實作感想</li>
</ol>
</blockquote>
<h2 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h2><p>實作這次的小遊戲是透過 Python 語言的套件：Pygame 來實現的，不過途中會遇到很多的版本問題，起源於 Pygame 本身版本相容性，因此我們要測試出能夠正常執行的版本，過程中不斷地嘗試，也不斷地失敗，最後才找出了解決方案，那就是透過 Conda 的環境來建置。</p>
<p>選擇安裝 Conda 版本，這邊選擇的是 MiniConda，因為本身不太需要原本 Conda 如此龐大的功能，因此選擇瘦身版的，再加上 Mac 的儲存空間著實珍貴啊！選用的版本為 <code>conda 4.12.0</code>，直接前往官網安裝相對應作業系統版本即可。</p>
<h4 id="官網連結："><a href="#官網連結：" class="headerlink" title="官網連結："></a>官網連結：</h4><p><a class="link"   href="https://docs.conda.io/en/latest/miniconda.html" >Miniconda Docs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="接著就開始建立環境吧！"><a href="#接著就開始建立環境吧！" class="headerlink" title="接著就開始建立環境吧！"></a>接著就開始建立環境吧！</h2><p>我們先確認 Conda 版本，在終端機輸入 <code>conda --version</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*1uDdGsxFlihzmPfLP6Mo4A.webp"
                     
                ></p>
<p>接著透過 Conda 建立名為 pygame 的虛擬環境，Python 的版本選用 <code>3.16.13</code> 並且激活執行該環境。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create --name pygame python=3.6.13</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda activate pygame</span></span><br></pre></td></tr></table></figure></div>

<p>確認 Python 版本，並且開始安裝我們需要的套件，如果把–user 省略，會直接安裝至 Conda 的環境。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python --version</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -m pip install -U pygame --user</span></span><br></pre></td></tr></table></figure></div>

<p>最後已經到了最後一步了，我們只要測試 pygame 能否正常運作便大功告成了，所以我們要執行 pygame 可以直接呼叫的小遊戲。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -m pygame.examples.aliens</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*xRYWm3kCCimYkrsHfh88KA.webp"
                     
                ></p>
<h2 id="實作說明"><a href="#實作說明" class="headerlink" title="實作說明"></a>實作說明</h2><p>前面做了這麼多的前置作業，那我們就開始進行實作吧！我們的順序會先引入套件，設定鍵盤方向鍵的接收，最後進行一連串的遊戲玩法設定，就大功告成啦！完整程式碼都放在 GitHub 給大家參考啦！畢竟全部放進文章，會變成流水帳，最後只要在終端機輸入 python main.py ，就可以正常執行貪吃蛇小遊戲囉！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*okV2P3qTibFMO1NWbaRBJQ.webp"
                     
                ></p>
<h2 id="實作感想"><a href="#實作感想" class="headerlink" title="實作感想"></a>實作感想</h2><p>當下實作程式碼，說真的也不完全是自己的東西，大多數的東西都要透過參考他人的實作來完成，不過在程式碼實作初期，環境崩掉的時候真的很讓人崩潰，只能不斷 conda remove -n env_name -all ，一直 rebuild，不過這過程中真的可以學到很多內容，可以更了解 python 語言的版本相應關係，以及要如何管理自己電腦環境（雖然現在環境依舊混亂～嘿嘿～）。</p>
<p>那在程式語言方面，練習到了物件導向的概念，可以把很多東西看成是一個個的物件，並且有分類的關係，即便當時看不太懂，但還是很有成就感，畢竟這是第一個小專案，能夠感受到不斷學習的狀態，這已經夠讓我珍惜了！未來也還會繼續分享專案實作，並且做更多深入地探究，繼續在電腦科學的道路上前行、突破！</p>
<hr>
<h2 id="（更新）專案後續發展"><a href="#（更新）專案後續發展" class="headerlink" title="（更新）專案後續發展"></a>（更新）專案後續發展</h2><p>現在時間是 2023 年初，過新年便有項恆年不變的傳統，那就是要「除舊佈新」，想當然爾過往的專案在此刻便會重出江湖，況且現在距離上次改動專案也隔了半年以上，寫程式碼的習慣也會因為參考了更多人的寫法而有所改動，因此在原有程式架構不變的情景下，將原本的程式碼重構，寫成呼叫物件的形式，以下便會直接透過程式碼說明，另外撰寫這段文字的時候也發現 Medium 改動了嵌入程式碼的方式，現在無需上傳到 GitHub Gist 也可以將程式碼顯示有 Syntax 的樣貌了，那我們就開始展開說明吧！</p>
<ul>
<li><p>將貪吃蛇的移動獨立成 <code>Direction.py</code></p>
  <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Direction</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line"></span><br><span class="line">    RIGHT = <span class="number">1</span></span><br><span class="line">    LEFT = <span class="number">2</span></span><br><span class="line">    UP = <span class="number">3</span></span><br><span class="line">    DOWN = <span class="number">4</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>將遊戲的主要規則程式寫入 <code>SnakeGame.py</code></p>
  <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Direction <span class="keyword">import</span> Direction</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">font = pygame.font.Font(<span class="string">&#x27;../src/arial.ttf&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, <span class="string">&#x27;x, y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rgb colors</span></span><br><span class="line">WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">RED = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">BLUE1 = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">BLUE2 = (<span class="number">0</span>, <span class="number">100</span>, <span class="number">255</span>)</span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">20</span></span><br><span class="line">SPEED = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnakeGame</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, w=<span class="number">640</span>, h=<span class="number">480</span></span>):</span><br><span class="line">        self.w = w</span><br><span class="line">        self.h = h</span><br><span class="line">        <span class="comment"># init display</span></span><br><span class="line">        self.display = pygame.display.set_mode((self.w, self.h))</span><br><span class="line">        pygame.display.set_caption(<span class="string">&#x27;Snake&#x27;</span>)</span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># init game state</span></span><br><span class="line">        self.direction = Direction.RIGHT</span><br><span class="line"></span><br><span class="line">        self.head = Point(self.w / <span class="number">2</span>, self.h / <span class="number">2</span>)</span><br><span class="line">        self.snake = [self.head, Point(self.head.x - BLOCK_SIZE, self.head.y),</span><br><span class="line">                    Point(self.head.x - (<span class="number">2</span> * BLOCK_SIZE), self.head.y)]</span><br><span class="line"></span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.food = <span class="literal">None</span></span><br><span class="line">        self._place_food()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_place_food</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(<span class="number">0</span>, (self.w - BLOCK_SIZE) // BLOCK_SIZE) * BLOCK_SIZE</span><br><span class="line">        y = random.randint(<span class="number">0</span>, (self.h - BLOCK_SIZE) // BLOCK_SIZE) * BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        self.food = Point(x, y)</span><br><span class="line">        <span class="keyword">if</span> self.food <span class="keyword">in</span> self.snake:</span><br><span class="line">            self._place_food()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play_step</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1. collect user input</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                quit()</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                    self.direction = Direction.LEFT</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                    self.direction = Direction.RIGHT</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                    self.direction = Direction.UP</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                    self.direction = Direction.DOWN</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. move</span></span><br><span class="line">        self._move(self.direction)  <span class="comment"># update the head</span></span><br><span class="line">        self.snake.insert(<span class="number">0</span>, self.head)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. check if game over</span></span><br><span class="line">        gameOver = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self._is_collision():</span><br><span class="line">            gameOver = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> gameOver, self.score</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. pace new food or just move</span></span><br><span class="line">        <span class="keyword">if</span> self.head == self.food:</span><br><span class="line">            self.score += <span class="number">1</span></span><br><span class="line">            self._place_food()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.snake.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. update ui and clock</span></span><br><span class="line">        self._update_ui()</span><br><span class="line">        self.clock.tick(SPEED)</span><br><span class="line">        <span class="comment"># 6. return gameOver and score</span></span><br><span class="line">        <span class="keyword">return</span> gameOver, self.score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_collision</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># hits boundary</span></span><br><span class="line">        <span class="keyword">if</span> self.head.x &gt; self.w - BLOCK_SIZE <span class="keyword">or</span> self.head.x &lt; <span class="number">0</span> <span class="keyword">or</span> self.head.y &gt; self.h - BLOCK_SIZE <span class="keyword">or</span> self.head.y &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># hits itself</span></span><br><span class="line">        <span class="keyword">if</span> self.head <span class="keyword">in</span> self.snake[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_ui</span>(<span class="params">self</span>):</span><br><span class="line">        self.display.fill(BLACK)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pt <span class="keyword">in</span> self.snake:</span><br><span class="line">            pygame.draw.rect(self.display, BLUE1, pygame.Rect(pt.x, pt.y, BLOCK_SIZE, BLOCK_SIZE))  <span class="comment"># 東西南北</span></span><br><span class="line">            pygame.draw.rect(self.display, BLUE2, pygame.Rect(pt.x + <span class="number">4</span>, pt.y + <span class="number">4</span>, <span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">        pygame.draw.rect(self.display, RED, pygame.Rect(self.food.x, self.food.y, BLOCK_SIZE, BLOCK_SIZE))</span><br><span class="line"></span><br><span class="line">        text = font.render(<span class="string">&quot;Score: &quot;</span> + <span class="built_in">str</span>(self.score), <span class="literal">True</span>, WHITE)</span><br><span class="line">        self.display.blit(text, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move</span>(<span class="params">self, direction</span>):</span><br><span class="line">        x = self.head.x</span><br><span class="line">        y = self.head.y</span><br><span class="line">        <span class="keyword">if</span> direction == Direction.RIGHT:</span><br><span class="line">            x += BLOCK_SIZE</span><br><span class="line">        <span class="keyword">elif</span> direction == Direction.LEFT:</span><br><span class="line">            x -= BLOCK_SIZE</span><br><span class="line">        <span class="keyword">elif</span> direction == Direction.DOWN:</span><br><span class="line">            y += BLOCK_SIZE</span><br><span class="line">        <span class="keyword">elif</span> direction == Direction.UP:</span><br><span class="line">            y -= BLOCK_SIZE</span><br><span class="line"></span><br><span class="line">        self.head = Point(x, y)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>最後創建 <code>main.py</code> 呼叫所有內容，便可向原先依樣正常執行啦！</p>
  <div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SnakeGame <span class="keyword">import</span> SnakeGame</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    game = SnakeGame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># game loop</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gameOver, score = game.play_step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> gameOver == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Final Score&#x27;</span>, score)</span><br><span class="line"></span><br><span class="line">    pygame.quit()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>此時在終端機執行 <code>python3 main.py</code> 也會出現相同的畫面呢！</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/max/1400/1*okV2P3qTibFMO1NWbaRBJQ.webp"
                     
                ></p>
<h2 id="重構心得"><a href="#重構心得" class="headerlink" title="重構心得"></a>重構心得</h2><p>這次會想要重構程式碼，便是因為 2022 後半年使用 python3 完成了一個新的專案，也在過程中才更認識 python3 類別的應用以及開發所需注意的小細節，所以才回想起曾經做過的小專案，嘗試將後續所學到的內容更應用在程式碼撰寫上，也增加自己多一次的經驗累積。</p>
<h3 id="Source-Code-in-GitHub-python-snake-game"><a href="#Source-Code-in-GitHub-python-snake-game" class="headerlink" title="Source Code in GitHub: python_snake_game"></a>Source Code in GitHub: <a class="link"   href="https://github.com/1chooo/junk-project/tree/main/python_snake_game" >python_snake_game <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><blockquote>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#104;&#117;&#103;&#x6f;&#x39;&#x37;&#48;&#50;&#x31;&#x37;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;" >&#104;&#117;&#103;&#x6f;&#x39;&#x37;&#48;&#50;&#x31;&#x37;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>我在 Conda 常用的指令</title>
    <url>/1chooo-blog/2023/07/29/python_venv/conda_tips/</url>
    <content><![CDATA[<blockquote>
<p>每次用 Conda 都要在搜尋一次嗎？以後就看這篇吧！</p>
</blockquote>
<p>相信有在透過 Python 開發的朋友，對 Python 環境的設置各有喜好，而有些時候相對應的專案會需要不同的環境需求，而這時 Conda 會是很好的夥伴，不過常常在使用 Conda 的時候，常常會不知道指令是什麼，因此每次需要使用的時候必須要上網查詢，如此便多了一些步驟，如此在日常工作流程便會受到限制，因此本篇會介紹一些 Conda 常被使用的 Command 指令，讓日常的工作更為順暢。</p>
<h3 id="本文綱要"><a href="#本文綱要" class="headerlink" title="本文綱要"></a>本文綱要</h3><ul>
<li><a href="#%E6%9C%AC%E6%96%87%E7%B6%B1%E8%A6%81">本文綱要</a></li>
<li><a href="#%E5%BB%BA%E7%AB%8B%E5%88%AA%E9%99%A4%E5%92%8C%E8%A4%87%E8%A3%BD%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">建立、刪除和複製虛擬環境</a><ul>
<li><a href="#%E5%BB%BA%E7%AB%8B%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">建立虛擬環境</a></li>
<li><a href="#%E5%88%AA%E9%99%A4%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">刪除虛擬環境</a></li>
<li><a href="#%E8%A4%87%E8%A3%BD%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">複製虛擬環境</a></li>
</ul>
</li>
<li><a href="#%E6%BF%80%E6%B4%BB%E8%88%87%E9%80%80%E5%87%BA%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">激活與退出虛擬環境</a></li>
<li><a href="#%E5%AE%89%E8%A3%9D%E5%8F%8A%E5%88%AA%E9%99%A4%E9%9C%80%E8%A6%81%E7%9A%84-package-%E8%87%B3%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">安裝及刪除需要的 package 至虛擬環境</a></li>
<li><a href="#%E6%9F%A5%E8%A9%A2%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83%E8%B3%87%E8%A8%8A">查詢虛擬環境資訊</a></li>
<li><a href="#%E5%B0%8E%E5%87%BA%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83">導出虛擬環境</a></li>
<li><a href="#%E6%96%87%E6%9C%AB%E5%B0%8F%E7%B5%90">文末小結</a></li>
<li><a href="#how-to-reach-out-to-me">How to reach out to me</a></li>
</ul>
<h3 id="建立、刪除和複製虛擬環境"><a href="#建立、刪除和複製虛擬環境" class="headerlink" title="建立、刪除和複製虛擬環境"></a>建立、刪除和複製虛擬環境</h3><h4 id="建立虛擬環境"><a href="#建立虛擬環境" class="headerlink" title="建立虛擬環境"></a>建立虛擬環境</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create -n your_env_name python=x.x.x                    <span class="comment"># 直接建立 python 版本為 x.x.x 的虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create -n your_env_name matplotlib numpy python=x.x.x   <span class="comment"># 建立虛擬環境同時一併安裝想要的 package (ex: numpy, matplotlib)</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="刪除虛擬環境"><a href="#刪除虛擬環境" class="headerlink" title="刪除虛擬環境"></a>刪除虛擬環境</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda deactivate                                  <span class="comment"># 首先必須先退出虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda remove -n your_env_name --all               <span class="comment"># 再來得以完整刪除虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda remove --name your_env_name package_name    <span class="comment"># 只刪除虛擬環境特定 package</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="複製虛擬環境"><a href="#複製虛擬環境" class="headerlink" title="複製虛擬環境"></a>複製虛擬環境</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create new_env_name --<span class="built_in">clone</span> old_env_name    <span class="comment"># 透過舊環境名稱，將原有虛擬環境的內容複製，進而生成新虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda create new_env_name --<span class="built_in">clone</span> old_env_path    <span class="comment"># 透過舊環境路徑，將原有虛擬環境的內容複製，進而生成新虛擬環境</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="激活與退出虛擬環境"><a href="#激活與退出虛擬環境" class="headerlink" title="激活與退出虛擬環境"></a>激活與退出虛擬環境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda activate your_env_name    <span class="comment"># 激活目標虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda deactivate                <span class="comment"># 退出目標虛擬環境</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="安裝及刪除需要的-package-至虛擬環境"><a href="#安裝及刪除需要的-package-至虛擬環境" class="headerlink" title="安裝及刪除需要的 package 至虛擬環境"></a>安裝及刪除需要的 package 至虛擬環境</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda install -n your_env_name package_name   <span class="comment"># 在目標的虛擬環境中安裝特定 package</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda remove -n your_env_name package_name    <span class="comment"># 在目標的虛擬環境中刪除特定 package</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="查詢虛擬環境資訊"><a href="#查詢虛擬環境資訊" class="headerlink" title="查詢虛擬環境資訊"></a>查詢虛擬環境資訊</h3><ul>
<li><h4 id="若想要更新-conda-之版本"><a href="#若想要更新-conda-之版本" class="headerlink" title="若想要更新 conda 之版本"></a>若想要更新 conda 之版本</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda update conda    <span class="comment"># 升級當前 conda 之版本</span></span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><h4 id="查看已安裝的-Conda-版本"><a href="#查看已安裝的-Conda-版本" class="headerlink" title="查看已安裝的 Conda 版本"></a>查看已安裝的 Conda 版本</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda --version   <span class="comment"># 第一種方法</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda -V          <span class="comment"># 第二種方法</span></span></span><br></pre></td></tr></table></figure></div>
<ul>
<li><h4 id="查看當前已建立環境列表"><a href="#查看當前已建立環境列表" class="headerlink" title="查看當前已建立環境列表"></a>查看當前已建立環境列表</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> list    <span class="comment"># 第一種方法</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda info -e     <span class="comment"># 第二種方法</span></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="查看在當前環境已安裝的-package"><a href="#查看在當前環境已安裝的-package" class="headerlink" title="查看在當前環境已安裝的 package"></a>查看在當前環境已安裝的 package</h4></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda list  <span class="comment"># 顯示當前虛擬環境已安裝的 package</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="導出虛擬環境"><a href="#導出虛擬環境" class="headerlink" title="導出虛擬環境"></a>導出虛擬環境</h3><p>透過 conda 的 export 導出 .yaml 的檔案格式，將虛擬環境名稱、位址、已安裝的 package 記錄下來。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; ~/env.yaml                       <span class="comment"># 將虛擬環境名稱、位址、已安裝的 package，輸出至 ~/env.yaml</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> <span class="built_in">export</span> &gt; your_goal_path/environment.yaml  <span class="comment"># 將虛擬環境名稱、位址、已安裝的 package，輸出至目標的路徑中</span></span></span><br></pre></td></tr></table></figure></div>

<p>接著也可以透過導出的 <code>.yaml</code> 創建新虛擬環境</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> create -f ~/env.yaml                      <span class="comment"># 透過 ~/env.yaml 的資訊，建立新虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> create -f your_goal_path/environment.yaml <span class="comment"># 透過目標的路徑中的 environment.yaml 的資訊，建立新虛擬環境</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="文末小結"><a href="#文末小結" class="headerlink" title="文末小結"></a>文末小結</h3><p>上述大多為平常使用 conda 虛擬環境常用之操作，而在文末，為不讓本篇文章看似單就普通說明書，接下來就來分享自己平時在使用 conda 虛擬環境的一些小習慣吧！我們話不多說，先上一張圖片吧！</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/1chooo-blog/../assets/imgs/conda_command.png"
                      alt="每次激活環境時的操作" title="每次激活環境時的操作"
                ><figcaption>每次激活環境時的操作</figcaption></figure></p>
<p>雖然是虛擬環境，可以隨時建立查看，發生錯誤也能立馬砍掉不影響其他操作進行，不過有些時候常常就因為存在太多已建立的環境，而導致混亂而發生錯誤，導致又要多花時間 Debug，所以每次我在使用虛擬環境前都會先檢查一些基本的資訊。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda --version               <span class="comment"># 檢查當前 conda 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> list                <span class="comment"># 查看當前已建立的所有虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda activate your_env_name  <span class="comment"># 激活目標的虛擬環境</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> python                  <span class="comment"># 檢查 python 的路徑是否存在虛擬環境下</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 --version             <span class="comment"># 檢查當前虛擬環境下的 python 版本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda list                    <span class="comment"># 檢查當前虛擬環境下的 package</span></span></span><br></pre></td></tr></table></figure></div>
<p>搭配了這些小習慣，讓我在使用虛擬環境時，比較不容易發生 call 錯環境的情形發生，也讓我在使用虛擬環境時更為順手。相信大家有了這些 conda 的常用 command，無論是工作中、研究中、日常興趣中，使用虛擬環境都能更為順手，增加工作效率。</p>
<p>若是還想要我再補充更多 conda 的操作，或是其他開發環境的建立，都歡迎留言一起討論哦～</p>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#x68;&#x75;&#103;&#111;&#57;&#x37;&#48;&#50;&#49;&#55;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;" >&#x68;&#x75;&#103;&#111;&#57;&#x37;&#48;&#50;&#49;&#55;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>venv</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>看完 Conda 教學還不夠！？這篇看完 Python 環境再也沒問題了！</title>
    <url>/1chooo-blog/2023/07/29/python_venv/pyvenv/</url>
    <content><![CDATA[<p>正在籌劃中！近景期待！</p>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>venv</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuphy 鍵盤初體驗</title>
    <url>/1chooo-blog/2023/07/29/unboxing/nuphy_unboxing/</url>
    <content><![CDATA[<p>對於機械鍵盤小白的我來說，每個軸體、手感、鍵帽等⋯⋯挑選鍵盤的考量對我來說都非常新奇，身為曾經買過一把機械鍵盤的我來說，正是個適合探索更多鍵盤的時機，於是決定購入觀望已久的鍵盤品牌 Nuphy — Halo 65。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*kEKLUPfj6VwF0zPckvIrVg.png"
                      alt="鍵盤本體"
                ><figcaption>鍵盤本體</figcaption></figure></p>
<blockquote>
<h3 id="本文綱要"><a href="#本文綱要" class="headerlink" title="本文綱要"></a>本文綱要</h3><ul>
<li>購買前的心理建設</li>
<li>開箱和小插曲</li>
<li>敲擊手感分享</li>
<li>結論</li>
<li>我的推薦碼</li>
</ul>
</blockquote>
<h2 id="購買前的心理建設"><a href="#購買前的心理建設" class="headerlink" title="購買前的心理建設"></a>購買前的心理建設</h2><p>首先，這隻鍵盤是 Nuphy 少有的正常尺寸設計，也就是非矮軸的設計，從各個開箱過 Nuphy 的內容中都可以看到鍵盤設計語言都是矮機械軸，難得推出了一把正常鍵帽的鍵盤，於是就手癢下單新推出的款式 - Halo 65，選擇的軸體是青軸版本的（G Pro Blue 2.0），外觀為挑選白色，加上預購所附贈的黑色鍵帽，沒有額外配上新出的手拖，不敢嘗試矮軸的原因是因為之前就是用原廠 Apple 鍵盤，沒有嘗試過機械軸的矮軸，便有點怕怕的 😨。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*nh7Q6SXwkOafr41Xcf1z8Q.png"
                      alt="青軸版本"
                ><figcaption>青軸版本</figcaption></figure></p>
<h2 id="開箱和小插曲"><a href="#開箱和小插曲" class="headerlink" title="開箱和小插曲"></a>開箱和小插曲</h2><p>隔了大約兩個星期的時間，鍵盤到貨了，比客服給的預定時間還要快，畢竟當時看 Nuphy 官方的 Instagram 帳號每天都在發有人已經到貨或者是開箱影片，對於鍵盤的期待值簡直被拉滿到了極限！到貨時包裝可說非常扎實，除了鍵盤本體之外，還有預購附贈的透光鍵帽（而這組件帽會迎來開箱的一個小插曲～我們後文再見！）當時購買鍵盤並沒有把手拖放入購物車，當時想說買 65 % 的鍵盤就是要讓桌面空間變得更大，這手拖應該意義不大，所以便只有兩個大傢伙，不得不說，應該是因為國際貨運的緣故，包裝得非常扎實，一打開包裝就看到熟悉的 Nuphy 日本畫風少女，便趕緊把包裝給拆了！</p>
<!-- <center class="multiple">
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*kS0XCBaLnimxfNoQW_RovQ.png"
                      width="200"
                >
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*zOqw6LpKMPaEF2tgFv7Log.png"
                      width="200"
                >
</center> -->
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*kS0XCBaLnimxfNoQW_RovQ.png"
                      alt="日系畫風少女"
                ><figcaption>日系畫風少女</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*zOqw6LpKMPaEF2tgFv7Log.png"
                      alt="包裝內容物"
                ><figcaption>包裝內容物</figcaption></figure></p>
<!-- 日系畫風少女 & 包裝內容物 -->

<p>包裝內有鍵盤本體，一組可以自由更換不同顏色的按鍵，以及所有 Nuphy 推出的軸體、拔鍵器、充電線，還有附一組貼紙（嘿嘿～又可以亂貼了！），這時的我馬上打開所有可以更換的按鍵，畢竟等了兩個星期，心中早已有想像渴望的鍵盤顏色了！不過這時候迎來了小插曲，也是這次開箱最崩潰的時候，預購所附贈的鍵帽跟原先鍵盤的鍵帽高低不同 😡 當時的我興高采烈地把想更換的按鍵都拔掉，結果一一裝回去的時候才發現不對勁，誒！高度怎麼都不一樣，這樣打起來手感好怪，立馬寫信去詢問以及去官網查看，結果有個小發現，還真的高度不太一樣，也正如客服所回信的一般，黑色透光鍵帽如同櫻桃一般，高度不一樣。不過在查詢官網圖片時，我還有發現了一個很奇怪的，官網標示的黑色透光鍵帽，shift 鍵上是有箭頭的，而我收到的卻沒有，然而官方客服卻回應說是為了讓透光效果更均勻，我簡直⋯⋯真的⋯⋯真的不知道該有什麼反應，還是摸摸鼻子算了吧！（雖然還是有點小不平衡）</p>
<!-- <center class="multiple">
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*OFULCyRHkQLvKcGkAAxjGQ.png"
                      width="200"
                >
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*T2v-Mfj5wnioRGFyLOPrig.png"
                      width="200"
                >
</center> -->

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*OFULCyRHkQLvKcGkAAxjGQ.png"
                      alt="小插曲"
                ><figcaption>小插曲</figcaption></figure><br><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*T2v-Mfj5wnioRGFyLOPrig.png"
                      alt="不同高低 shift 鍵"
                ><figcaption>不同高低 shift 鍵</figcaption></figure></p>
<!-- 小插曲——不同高低 shift 鍵 -->
<h2 id="敲擊手感分享"><a href="#敲擊手感分享" class="headerlink" title="敲擊手感分享"></a>敲擊手感分享</h2><p>那我們分享了外觀就來分享敲擊鍵盤的手感吧！因為購買的是青軸，理所當然就是要夠吵還要搭上瘋狂輸出文字的感覺，不得不說敲擊下去之後的聲音回饋是真的滿爽的，跟原先使用的機械紅軸差很多，不過各有千秋，我都滿喜歡的，接著敲擊的手感滿清脆的，呈現了一定觸發的段落，打久了是不會感受到疲累的，還有種莫名打字的速度變快的錯覺，不過鍵盤的排列需要一點時間適應，例如刪除鍵，之前習慣直接往右上角的鍵按下去，但這把鍵盤不需要移到右上角，畢竟最右邊有一列功能鍵，再來就是 function 鍵了，起初真的不太會用，花了滿多時間爬文才得以上手，但還是不太熟悉就是了（有沒有習慣用小尺寸鍵盤的 Mac 用戶可以分享 🙃）。</p>
<p>話說至此，對這把鍵盤的綜合評價還是很高的，敲擊的立回饋滿舒服的，真的是一把好的鍵盤，不過有一點不是很諒解，那就是鍵帽可以搖晃，也就是說不太穩，相較先前的鍵盤有點落差，不過打久了便不是太大的問題，不是很影響敲擊鍵盤的狀態。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*4PwD-P6aBdwGi72ztblR5Q.png"
                      alt="鍵盤本人"
                ><figcaption>鍵盤本人</figcaption></figure></p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>總結下來，這次買新鍵盤的體驗，沒有辦法到滿分，畢竟花了將近四千塊錢的價格，卻收到標示和官網不太相同的鍵帽，這點實屬在內心扣了分，不過綜合其他鍵盤手感而言，能給予的評價還是挺高的，畢竟跟我想像中的青軸差不多，會讓我有瘋狂輸出之感，也就是手按到哪，就給予我力度以及聲音的回饋，再來就是 Nuphy 的鍵盤顏值是真的高，可客製化的顏色也是很多樣化，主打的黃、綠、橘搭配起來真是好看，再加上 RGB 的燈效，光害、爽度直接拉滿，所以還是挺推薦這組鍵盤的，想要嘗試高顏值且小尺寸的鍵盤，以及清脆的青軸敲擊感，選這把絕對沒問題，還在觀望的下單下去就對了！底下附上我的折扣碼可享有優惠哦～</p>
<p>之後也會再補開箱個先前那把機械紅軸的，畢竟當時滿心期待就開始使用，完全忘卻可以分享這回事！底下連結可以試聽青軸一小時哦！哈！那我們下次見～～～</p>
<!-- 這邊要遷入一段影片 -->
<!-- <iframe width="560" height="315" src="https://www.youtube.com/watch?time_continue=1&v=6EvcMMu6crM&embeds_widget_referrer=https%3A%2F%2Fmedium.com%2F&embeds_euri=https%3A%2F%2Fcdn.embedly.com%2F&embeds_origin=https%3A%2F%2Fcdn.embedly.com&feature=emb_logo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe> -->

<p>我的推薦碼：<br><a class="link"   href="https://go.referralcandy.com/share/MV4GVPW" >https://go.referralcandy.com/share/MV4GVPW <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#104;&#117;&#103;&#111;&#x39;&#55;&#x30;&#50;&#x31;&#55;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;" >&#104;&#117;&#103;&#111;&#x39;&#55;&#x30;&#50;&#x31;&#55;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>unboxing</category>
      </categories>
      <tags>
        <tag>Nuphy</tag>
        <tag>keyboard</tag>
      </tags>
  </entry>
  <entry>
    <title>演算法第一講——Euclid Algorithm 歐幾里得演算法</title>
    <url>/1chooo-blog/2023/07/29/ds_and_alg/alg/euclid/</url>
    <content><![CDATA[<p>大家在過往學習的經驗中，可能都有聽過歐幾里德這名鼎鼎大名的人物，是位在希臘化時期的數學家，有著著名著作「幾何原本」，在數學領域中有著極大化的貢獻，為現今眾多數學家所認同。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1340/format:webp/1*xS3rVXn57DTerPNCZuOJ_g.jpeg"
                      alt="Euclid and Geometry"
                ><figcaption>Euclid and Geometry</figcaption></figure></p>
<p>然而在古希臘的時代的數學家竟然能跟演算法畫上關係，畢竟演算法便是透過有限的步驟中，將給定的輸入做出最有效的解決，並且在執行玩這些有效的步驟中會有正當的終止，產生最後輸出結果，而歐幾里德演算法得以詮釋這些過程，歐幾里德演算法的問題是要在給定的兩個正整數 m 和 n 中找出兩束的最大公因數，因此我們可以列出以下解題步驟：</p>
<ol>
<li>找出餘數 (m % n)</li>
<li>判斷餘數是否為零 (if (r &#x3D; 0) return n)</li>
<li>被除數與餘數互換 (swap(m, n))</li>
</ol>
<p>那看到這邊可能人會有很多有很熟悉的感覺，畢竟我們曾經學習過求公因數的方法有：列舉法、質因數分解、短除法等⋯⋯那其中還有一個有趣的方法便是「輾轉相除法」，也就是我們今天要討論到的歐幾里德演算法，然而所謂的「輾轉」是什麼呢？可能是 Debug 睡不著的時候吧！哈！不過這樣也說得通，輾轉就是曲折的、不斷的過程，而我們正是透過這樣的特性來達成我們的演算法。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ZtKWx4DZ0FY6SBSctDWtUQ.png"
                      alt="輾轉相除法直式"
                ><figcaption>輾轉相除法直式</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GLbMrGYdxAAT-3Vee-vXDA.png"
                      alt="輾轉過程"
                ><figcaption>輾轉過程</figcaption></figure></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GLbMrGYdxAAT-3Vee-vXDA.png"
                      alt="過程以長方形圖是呈現"
                ><figcaption>過程以長方形圖是呈現</figcaption></figure></p>
<p>透過上方圖示我們便可看出輾轉的真正特性，透過互換且不斷地進行運算，已達到我們期望的結果，也可以從上圖中透過切割長方形的模式，在長方形中找出能切割的最大面積正方形，以此將整個長方形變成有正方形所組成的型態，這又可以回歸到上述所歸納的兩個解：</p>
<ol>
<li>餘數為 0 -&gt; 完整地切割</li>
<li>餘數為 1 -&gt; 無法完整地切割</li>
</ol>
<p>想必讀到這裡一定更能理解輾轉相除法，接下來我們進行實作吧！</p>
<h3 id="以下我們展示虛擬碼-Pseudocode"><a href="#以下我們展示虛擬碼-Pseudocode" class="headerlink" title="以下我們展示虛擬碼 (Pseudocode)"></a>以下我們展示虛擬碼 (Pseudocode)</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">Algorithm: <span class="built_in">EuclidGCD</span>(m, n)</span><br><span class="line">Input: Two integer m <span class="keyword">and</span> n.</span><br><span class="line">Output: The greatest common factor of m <span class="keyword">and</span> n.</span><br><span class="line">r &lt;- m % n</span><br><span class="line"><span class="keyword">while</span> r != <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    m &lt;- n</span><br><span class="line">    n &lt;- r</span><br><span class="line">    r &lt;- m % n</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">以下我們使用 cpp 實作</span><br><span class="line"><span class="type">int</span> <span class="built_in">EuclidGCD</span>(<span class="type">int</span> m, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> r = m % n;</span><br><span class="line">    <span class="keyword">while</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        m = n;</span><br><span class="line">        n = r;</span><br><span class="line">        r = m % n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那上面我們討論到歐幾里德演算法的範疇實屬理論，那實際用途到底可以實現什麼情形呢？在分析這道問號題之前，我們可以再回想一下此演算法，最核心的就是要找出最大公因數，並且在由大化小的過程中，可以達成更有效率地轉換，畢竟是透過一系列輾轉的過程，所以其實輾轉相除法的應用層面非常廣，可以在密碼學、數學、計算機科學等⋯⋯領域做使用，甚至在音樂方面都能有實際上的應用，若想知道更多，網路上其實還有更多有趣的範例等著你們去挖掘呢！（維基百科下方的參考連結有超多有趣的例子！）</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/56528787" >欧几里得与《几何原本》(上篇） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://jason-chen-1992.weebly.com/home/-euclidean-algorithm" >【演算法】歐幾里得算法 Euclidean Algorithm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<blockquote>
<h3 id="How-to-reach-out-to-me"><a href="#How-to-reach-out-to-me" class="headerlink" title="How to reach out to me"></a>How to reach out to me</h3><ul>
<li>Ins: <a class="link"   href="https://www.instagram.com/lcho____/" >@lcho____ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Linkedin: <a class="link"   href="https://www.linkedin.com/in/1chooo/" >Hugo ChunHo Lin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>GitHub: <a class="link"   href="https://github.com/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>About me: <a class="link"   href="https://sites.google.com/g.ncu.edu.tw/1chooo" >1chooo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Email: <a class="link"   href="mailto:&#x68;&#x75;&#x67;&#111;&#x39;&#x37;&#x30;&#50;&#x31;&#55;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;" >&#x68;&#x75;&#x67;&#111;&#x39;&#x37;&#x30;&#50;&#x31;&#55;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>note</tag>
      </tags>
  </entry>
</search>
